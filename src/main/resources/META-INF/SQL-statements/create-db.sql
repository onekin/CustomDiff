-- MySQL Script generated by MySQL Workbench
-- Thu Nov  2 18:00:19 2017
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema customdiff
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema customdiff
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `customdiff` DEFAULT CHARACTER SET utf8 ;
USE `customdiff` ;

-- -----------------------------------------------------
-- Table `customdiff`.`component_package`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`component_package` (
  `idpackage` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `isroot` INT NULL,
  `isnew` INT NULL,
  PRIMARY KEY (`idpackage`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`core_asset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`core_asset` (
  `idcoreasset` INT NOT NULL,
  `name` VARCHAR(200) NULL,
  `path` VARCHAR(200) NULL,
  `size` INT NULL,
  `isNewAsset` INT NULL,
  `content` LONGTEXT NULL,
  `idpackage` INT NOT NULL,
  PRIMARY KEY (`idcoreasset`),
  INDEX `fk_core_asset_component_package1_idx` (`idpackage` ASC),
  CONSTRAINT `fk_core_asset_component_package1`
    FOREIGN KEY (`idpackage`)
    REFERENCES `customdiff`.`component_package` (`idpackage`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`feature_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`feature_group` (
  `id_feature_group` INT NOT NULL,
  PRIMARY KEY (`id_feature_group`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`variation_point`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`variation_point` (
  `idvariationpoint` INT NOT NULL,
  `expression` LONGTEXT NULL,
  `idcoreasset` INT NOT NULL,
  `id_feature_group` INT NULL,
  PRIMARY KEY (`idvariationpoint`),
  INDEX `fk_ProductAssetVP_ProductAsset1_idx` (`idcoreasset` ASC),
  INDEX `fk_VariationPoint_Feature_group1_idx` (`id_feature_group` ASC),
  CONSTRAINT `fk_ProductAssetVP_ProductAsset1`
    FOREIGN KEY (`idcoreasset`)
    REFERENCES `customdiff`.`core_asset` (`idcoreasset`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_VariationPoint_Feature_group1`
    FOREIGN KEY (`id_feature_group`)
    REFERENCES `customdiff`.`feature_group` (`id_feature_group`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`developer_group`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`developer_group` (
  `id_developer_group` INT NOT NULL,
  PRIMARY KEY (`id_developer_group`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`product_release`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`product_release` (
  `idproductrelease` INT NOT NULL,
  `name` VARCHAR(200) NULL,
  `date` DATETIME NULL,
  `commits_set` LONGTEXT NULL,
  PRIMARY KEY (`idproductrelease`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`customization_fact`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`customization_fact` (
  `idcustomization` INT NOT NULL,
  `lines_added` INT NULL,
  `lines_deleted` INT NULL,
  `custom_diff` LONGTEXT NULL,
  `commit_set` LONGTEXT NULL,
  `message_set` LONGTEXT NULL,
  `greater_diff` LONGTEXT NULL,
  `type` VARCHAR(200) NULL,
  `idvariationpoint` INT NOT NULL,
  `id_developer_group` INT NOT NULL,
  `idproductrelease` INT NOT NULL,
  PRIMARY KEY (`idcustomization`),
  INDEX `fk_Customization_ProductAssetVP_idx` (`idvariationpoint` ASC),
  INDEX `fk_CustomizationFact_developer_group1_idx` (`id_developer_group` ASC),
  INDEX `fk_CustomizationFact_ProductRelease1_idx` (`idproductrelease` ASC),
  CONSTRAINT `fk_Customization_ProductAssetVP`
    FOREIGN KEY (`idvariationpoint`)
    REFERENCES `customdiff`.`variation_point` (`idvariationpoint`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomizationFact_developer_group1`
    FOREIGN KEY (`id_developer_group`)
    REFERENCES `customdiff`.`developer_group` (`id_developer_group`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CustomizationFact_ProductRelease1`
    FOREIGN KEY (`idproductrelease`)
    REFERENCES `customdiff`.`product_release` (`idproductrelease`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`developer`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`developer` (
  `iddeveloper` INT NOT NULL,
  `name` VARCHAR(200) NULL,
  `email` VARCHAR(45) NULL,
  PRIMARY KEY (`iddeveloper`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`parent_feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`parent_feature` (
  `idparentfeature` INT NOT NULL,
  `name` VARCHAR(45) NULL,
  `responsible` VARCHAR(45) NULL,
  PRIMARY KEY (`idparentfeature`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`feature`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`feature` (
  `idfeature` VARCHAR(200) NOT NULL,
  `name` VARCHAR(200) NULL,
  `isNew` INT NULL,
  `idparent` INT NOT NULL,
  PRIMARY KEY (`idfeature`),
  INDEX `fk_feature_ParentFeature1_idx` (`idparent` ASC),
  CONSTRAINT `fk_feature_ParentFeature1`
    FOREIGN KEY (`idparent`)
    REFERENCES `customdiff`.`parent_feature` (`idparentfeature`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`feature_bridge`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`feature_bridge` (
  `id_feature_group` INT NOT NULL,
  `id_feature` VARCHAR(200) NOT NULL,
  PRIMARY KEY (`id_feature_group`, `id_feature`),
  INDEX `fk_Feature_group_has_Feature_Feature1_idx` (`id_feature` ASC),
  INDEX `fk_Feature_group_has_Feature_Feature_group1_idx` (`id_feature_group` ASC),
  CONSTRAINT `fk_Feature_group_has_Feature_Feature_group1`
    FOREIGN KEY (`id_feature_group`)
    REFERENCES `customdiff`.`feature_group` (`id_feature_group`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_Feature_group_has_Feature_Feature1`
    FOREIGN KEY (`id_feature`)
    REFERENCES `customdiff`.`feature` (`idfeature`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `customdiff`.`developer_bridge`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`developer_bridge` (
  `id_developer_group` INT NOT NULL,
  `id_developer` INT NOT NULL,
  PRIMARY KEY (`id_developer_group`, `id_developer`),
  INDEX `fk_developer_bridge_developer_group1_idx` (`id_developer_group` ASC),
  INDEX `fk_developer_bridge_Developer1_idx` (`id_developer` ASC),
  CONSTRAINT `fk_developer_bridge_developer_group1`
    FOREIGN KEY (`id_developer_group`)
    REFERENCES `customdiff`.`developer_group` (`id_developer_group`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_developer_bridge_Developer1`
    FOREIGN KEY (`id_developer`)
    REFERENCES `customdiff`.`developer` (`iddeveloper`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;

USE `customdiff` ;

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`new_assets_in_products`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`new_assets_in_products` (`'id'` INT, `'idasset'` INT, `'name'` INT, `'path'` INT, `'content'` INT, `'size'` INT, `'pr_id'` INT, `'pr_name'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`features_in_variationpoints`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`features_in_variationpoints` (`'id'` INT, `'id_variationpoint'` INT, `expression` INT, `'feature_name'` INT, `'id_feature'` INT, `'id_coreasset'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_productportfolio_features`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_productportfolio_features` (`'id'` INT, `'id_feature'` INT, `'featuremodified'` INT, `'id_pr'` INT, `'pr_name'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_coreassets_and_features_by_pr`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_coreassets_and_features_by_pr` (`'id'` INT, `'idcoreasset'` INT, `'idproductrelease'` INT, `'pr_name'` INT, `'ca_name'` INT, `'ca_path'` INT, `'idfeature'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`coreassets_and_features`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`coreassets_and_features` (`'id'` INT, `'idcoreasset'` INT, `'caname'` INT, `'capath'` INT, `'idpackage'` INT, `'idfeature'` INT, `'size'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`customs_by_feature_and_coreasset`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`customs_by_feature_and_coreasset` (`'id'` INT, `'idcustomization'` INT, `'idfeature'` INT, `'idcoreasset'` INT, `'idparentfeature'` INT, `'parentfeaturename'` INT, `'caname'` INT, `'capath'` INT, `'idproductrelease'` INT, `'prname'` INT, `'added'` INT, `'deleted'` INT, `'custom_diff'` INT, `'messages'` INT, `'commits'` INT, `'maindiff'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_parent_features_productportfolio`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_parent_features_productportfolio` (`'id'` INT, `'id_parentfeature'` INT, `'parentfeaturename'` INT, `'id_pr'` INT, `'pr_name'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_parent_features_product_packages`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_parent_features_product_packages` (`'id'` INT, `'id_parentfeature'` INT, `'parentfeaturename'` INT, `'idproductrelease'` INT, `'pr_name'` INT, `'idpackage'` INT, `'package_name'` INT, `'isroot'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_parent_features_package_assets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_parent_features_package_assets` (`'id'` INT, `'id_parentfeature'` INT, `'parentfeaturename'` INT, `'idproductrelease'` INT, `'pr_name'` INT, `'idpackage'` INT, `'package_name'` INT, `'isroot'` INT, `'idcoreasset'` INT, `'caname'` INT, `'capath'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_features_product_packages`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_features_product_packages` (`'id'` INT, `'idfeature'` INT, `'featurename'` INT, `'idparentfeature'` INT, `'idproductrelease'` INT, `'pr_name'` INT, `'idpackage'` INT, `'package_name'` INT, `'isroot'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- Placeholder table for view `customdiff`.`churn_features_package_assets`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `customdiff`.`churn_features_package_assets` (`'id'` INT, `'idfeature'` INT, `'featurename'` INT, `'idparentfeature'` INT, `'idproductrelease'` INT, `'pr_name'` INT, `'idpackage'` INT, `'package_name'` INT, `'isroot'` INT, `'idcoreasset'` INT, `'caname'` INT, `'capath'` INT, `'added'` INT, `'deleted'` INT, `'churn'` INT);

-- -----------------------------------------------------
-- View `customdiff`.`new_assets_in_products`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`new_assets_in_products`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `new_assets_in_products` AS

select UUID() as 'id', ca.idcoreasset as 'idasset', ca.name as 'name', ca.path as 'path', ca.content as 'content', ca.size as 'size', pr.idproductrelease as 'pr_id', pr.name as 'pr_name'
from core_asset ca inner join variation_point vp  on ca.idcoreasset = vp.idcoreasset
inner join customization_fact c on c.idvariationpoint = vp.idvariationpoint
inner join product_release pr on pr.idproductrelease = c.idproductrelease
where isNewAsset=1;

-- -----------------------------------------------------
-- View `customdiff`.`features_in_variationpoints`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`features_in_variationpoints`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `features_in_variationpoints` AS

select UUID() as 'id', vp.idvariationpoint as 'id_variationpoint', expression
 ,f.name as 'feature_name', f.idfeature as 'id_feature', ca.idcoreasset as 'id_coreasset'

from variation_point vp inner join core_asset ca on vp.idcoreasset = ca.idcoreasset
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature;

-- -----------------------------------------------------
-- View `customdiff`.`churn_productportfolio_features`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_productportfolio_features`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_productportfolio_features` AS

select UUID() as 'id',f.idfeature as 'id_feature' ,f.name as 'featuremodified', pr.idproductrelease as 'id_pr', pr.name as 'pr_name',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn', f.idparent as 'id_parent_feature'
from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by f.idfeature, pr.idproductrelease;

-- -----------------------------------------------------
-- View `customdiff`.`churn_coreassets_and_features_by_pr`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_coreassets_and_features_by_pr`;
USE `customdiff`;
	CREATE  OR REPLACE VIEW `churn_coreassets_and_features_by_pr` AS

	select UUID() as 'id', ca.idcoreasset as 'idcoreasset', pr.idproductrelease as 'idproductrelease' , pr.name as 'pr_name', ca.name as 'ca_name',
	ca.path as 'ca_path', f.idfeature as 'idfeature', sum(c.lines_added + c.lines_deleted) as 'churn', cp.name as 'packagename', cp.idpackage as 'package_id'

	from customization_fact c inner join variation_point vp
	on c.idvariationpoint = vp.idvariationpoint
	inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
	inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
	inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
	inner join feature f on f.idfeature = fb.id_feature
	inner join product_release pr on pr.idproductrelease = c.idproductrelease
	inner join component_package cp on  ca.idpackage = cp.idpackage
	group by f.idfeature, pr.idproductrelease, ca.idcoreasset;

-- -----------------------------------------------------
-- View `customdiff`.`coreassets_and_features`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`coreassets_and_features`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `coreassets_and_features` AS

select UUID() as 'id', ca.idcoreasset as 'idcoreasset', ca.name as 'caname', ca.path as 'capath', ca.idpackage as 'idpackage',
f.idfeature as 'idfeature', ca.size as 'size'
from variation_point vp inner join core_asset ca on vp.idcoreasset = ca.idcoreasset
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature;

-- -----------------------------------------------------
-- View `customdiff`.`customs_by_feature_and_coreasset`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`customs_by_feature_and_coreasset`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `customs_by_feature_and_coreasset` AS

select UUID() as 'id', c.idcustomization as 'idcustomization', f.idfeature as 'idfeature', ca.idcoreasset as 'idcoreasset', ca.idpackage as 'idpackage', f.idparent as 'idparentfeature', pf.name as 'parentfeaturename',
ca.name as 'caname', ca.path as 'capath', pr.idproductrelease as 'idproductrelease' , pr.name as 'prname', c.lines_added as 'added',
c.lines_deleted as 'deleted',	
c.custom_diff as 'custom_diff', c.message_set as 'messages', c.commit_set as 'commits', c.greater_diff as 'maindiff', vp.expression AS 'expression' 

from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join parent_feature pf on pf.idparentfeature = f.idparent
inner join product_release pr on pr.idproductrelease = c.idproductrelease
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset WHERE f.idfeature!='No Feature';

-- -----------------------------------------------------
-- View `customdiff`.`churn_parent_features_productportfolio`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_parent_features_productportfolio`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_parent_features_productportfolio` AS

select UUID() as 'id',pf.idparentfeature as 'id_parentfeature', pf.name as 'parentfeaturename', pr.idproductrelease as 'id_pr', pr.name as 'pr_name',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn'
from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join parent_feature pf on pf.idparentfeature = f.idparent
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by pf.idparentfeature, pr.idproductrelease;

-- -----------------------------------------------------
-- View `customdiff`.`churn_parent_features_product_packages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_parent_features_product_packages`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_parent_features_product_packages` AS

select UUID() as 'id',pf.idparentfeature as 'id_parentfeature', pf.name as 'parentfeaturename', pr.idproductrelease as 'idproductrelease', pr.name as 'pr_name', cp.idpackage as 'idpackage', cp.name as 'package_name', cp.isroot as 'isroot',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn'


from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
inner join component_package cp on cp.idpackage = ca.idpackage
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join parent_feature pf on pf.idparentfeature = f.idparent
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by pf.idparentfeature, pr.idproductrelease, cp.idpackage;

-- -----------------------------------------------------
-- View `customdiff`.`churn_parent_features_package_assets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_parent_features_package_assets`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_parent_features_package_assets` AS

select UUID() as 'id',pf.idparentfeature as 'id_parentfeature', pf.name as 'parentfeaturename', pr.idproductrelease as 'idproductrelease', pr.name as 'pr_name', cp.idpackage as 'idpackage', cp.name as 'package_name', 
cp.isroot as 'isroot', ca.idcoreasset as 'idcoreasset', ca.name as 'caname', ca.path as 'capath',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn'


from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
inner join component_package cp on cp.idpackage = ca.idpackage
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join parent_feature pf on pf.idparentfeature = f.idparent
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by pf.idparentfeature, pr.idproductrelease, cp.idpackage, ca.idcoreasset;

-- -----------------------------------------------------
-- View `customdiff`.`churn_features_product_packages`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_features_product_packages`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_features_product_packages` AS

select UUID() as 'id',f.idfeature as 'idfeature', f.name as 'featurename', f.idparent as 'idparentfeature', pr.idproductrelease as 'idproductrelease', pr.name as 'pr_name', cp.idpackage as 'idpackage', cp.name as 'package_name', cp.isroot as 'isroot',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn'


from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
inner join component_package cp on cp.idpackage = ca.idpackage
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by f.idfeature, pr.idproductrelease, cp.idpackage;





CREATE  OR REPLACE VIEW `churn_packages_and_product` AS

select UUID() as 'id', cp.idpackage as 'id_package', pr.idproductrelease as 'id_product_release' , pr.name as 'pr_name', cp.name as 'package_name', sum(c.lines_added + c.lines_deleted) as 'churn', f.idfeature as 'id_feature'

from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join product_release pr on pr.idproductrelease = c.idproductrelease
inner join component_package cp on ca.idpackage = cp.idpackage
WHERE f.idfeature!='No Feature'
group by  pr.idproductrelease, ca.idpackage;

-- -----------------------------------------------------
-- View `customdiff`.`churn_features_package_assets`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `customdiff`.`churn_features_package_assets`;
USE `customdiff`;
CREATE  OR REPLACE VIEW `churn_features_package_assets` AS

select UUID() as 'id',f.idfeature as 'idfeature', f.name as 'featurename', f.idparent as 'idparentfeature', pr.idproductrelease as 'idproductrelease', pr.name as 'pr_name', 
cp.idpackage as 'idpackage', cp.name as 'package_name', cp.isroot as 'isroot', ca.idcoreasset as 'idcoreasset', ca.name as 'caname', ca.path as 'capath',
 sum(c.lines_added) as 'added', sum(c.lines_deleted) as 'deleted', sum(c.lines_added+c.lines_deleted) as 'churn'


from customization_fact c inner join variation_point vp
on c.idvariationpoint = vp.idvariationpoint
inner join core_asset ca on ca.idcoreasset = vp.idcoreasset
inner join component_package cp on cp.idpackage = ca.idpackage
inner join feature_group fg on fg.id_feature_group = vp.id_feature_group 
inner join feature_bridge fb on fb.id_feature_group = fg.id_feature_group
inner join feature f on f.idfeature = fb.id_feature
inner join product_release pr on pr.idproductrelease = c.idproductrelease
group by f.idfeature, pr.idproductrelease, cp.idpackage, ca.idcoreasset;

SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
